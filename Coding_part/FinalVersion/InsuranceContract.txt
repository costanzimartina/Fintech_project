pragma solidity ^ 0.5.1;

import "./PersonalProfile.sol";

contract Insurer {
    
    address owner; // the address of the insurer
    uint256 maxCoverage = 8 ether; // the insurance is going to pay the mimimum between this value and the damage
    uint256 refund; // global variable for payment 
    
    // setting the owner
    constructor() 
    public 
        {
            owner = msg.sender;
        }
    
    // function that returns the balance of the insurer
    function Balance() public view returns(uint) {
        return address(this).balance;
    }
    
    function() external payable {} // fallback function such that insurer can receive the money from personal profiles
    
    // this struct stores the information of each person
    struct Insured {
     
        string name;
        string surname;
        string birth;
        string licenseID;
        string vehicle;
        bool has_payed; // this bool is very important: defaults to false and is set to true when the person pays the premium --> after payment, the person is covered and can get refund
    }
    
    // the mapping goes from an array of addresses (the ones of the personal profiles) to all the info {address : {PersonalInfo}}
    mapping(address => Insured) all_insured_info;
    address[] public recorded_accounts_array; // here's the array of addresses
    
    // function to insert an insured inside the mapping-struct. It is called by PersonalProfile.sol inside the function "pushToInsurer", when the person shares its information
    function addInsured(
                        address _person, string memory _name, string memory _surname, 
                        string memory _birth, string memory _licenseID, string memory _vehicle)
        public {
            Insured storage i = all_insured_info[_person];
            i.name = _name;
            i.surname = _surname;
            i.birth = _birth;
            i.licenseID = _licenseID;
            i.vehicle = _vehicle;
            recorded_accounts_array.push(_person) -1;
            }
            
    // function to show the personal data of an insured using as key its own address
    function viewInsured(address _person) public view 
        returns(string memory, string memory, string memory, string memory, string memory, bool)
        {
        return (all_insured_info[_person].name,
                all_insured_info[_person].surname,
                all_insured_info[_person].birth,
                all_insured_info[_person].licenseID,
                all_insured_info[_person].vehicle,
                all_insured_info[_person].has_payed
                );
        }
        
    // function that updates to true the boolean attribute of the struct "Insured" referred to the key _person (which is an address). Called by PersonalProfile in "payAndgetInsurance"
    function activateInsurance(address _person)
    public
    {
        Insured storage i = all_insured_info[_person];
        i.has_payed = true;
    }
    
    // part of the refund
    // we have a PoliceReport struct with all the info of the police report. Remember that it's the person who shares it but the person cannot modify it.
    struct PoliceReport {
        string vehicle;
        string fault; // licenseID of the faulty person
        uint256 damage;
        bool eligible; // default = false. whether the person is eligible to be paid or not (see "evaluateEligibility" function)
        bool has_been_payed; // default = false. whether the person has already received the refund or not
        }
        
    mapping(address => PoliceReport)
