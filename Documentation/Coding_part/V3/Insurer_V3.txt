pragma solidity ^ 0.5.1;

import "./PersonalProfile.sol";

contract Insurer {
    
    address owner; //the address of the insurer
    uint256 maxCoverage = 5 ether;
    uint256 refund;
    
    // setting the owner
    constructor() 
    public 
        {
            owner = msg.sender;
        }
        
    function Balance() public view returns(uint) {
        return address(this).balance;
    }
    
    function() external payable {}
    
    struct Insured {
     //   address person
        string name;
        string surname;
        string birth;
        string licenseID;
        string vehicle;
        bool has_payed;
    }
    
    mapping(address => Insured) all_insured_info;
    address[] public insured_accounts_array;
    
    function addInsured(
                        address _person, string memory _name, string memory _surname, 
                        string memory _birth, string memory _licenseID, string memory _vehicle)
        public {
            Insured storage i = all_insured_info[_person];
            i.name = _name;
            i.surname = _surname;
            i.birth = _birth;
            i.licenseID = _licenseID;
            i.vehicle = _vehicle;
            insured_accounts_array.push(_person) -1;
            }
            
    function viewInsured(address _person) public view 
        returns(string memory, string memory, string memory, string memory, string memory, bool)
        {
        return (all_insured_info[_person].name,
                all_insured_info[_person].surname,
                all_insured_info[_person].birth,
                all_insured_info[_person].licenseID,
                all_insured_info[_person].vehicle,
                all_insured_info[_person].has_payed
                );
        }
        
    function activateInsurance(address _person)
    public
    {
        Insured storage i = all_insured_info[_person];
        i.has_payed = true;
    }
    
    // part of the refund
    
    struct PoliceReport {
        string vehicle;
        string fault;
        uint256 damage;
        bool eligible;
        bool has_been_payed;
        }
        
    mapping(address => PoliceReport) addresses;
        address[] public RefundQueue;
        
    function UpdateReport(address _person, string memory _vehicle, string memory _fault, uint256 _damage) 
    public 
    {
        PoliceReport storage pR = addresses[_person];
        pR.vehicle = _vehicle;
        pR.fault = _fault;
        pR.damage = _damage;
        RefundQueue.push(_person) -1;
    }
    
    function ShowRefundRequests(address _person) 
    public view 
    returns(string memory, string memory, uint256, bool, bool)
    {
        return(addresses[_person].vehicle,
               addresses[_person].fault,
               addresses[_person].damage,
               addresses[_person].eligible,
               addresses[_person].has_been_payed);
    }
    
    function compareStringsTrue (string memory a, string memory b) public pure
        returns (bool) {
        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));
        }
  
  function compareStringsFalse (string memory a, string memory b) public pure
        returns (bool) {
        return (keccak256(abi.encodePacked((a))) != keccak256(abi.encodePacked((b))));
        }
    
    function evaluateEligibility(address _person) 
    public
    {
        PoliceReport storage pR = addresses[_person];
        Insured storage ins = all_insured_info[_person];
        
        if((compareStringsTrue(pR.vehicle, ins.vehicle)) && (ins.has_payed == true) && (compareStringsFalse(pR.fault, ins.name))) {
            pR.eligible = true;
        }
        }
        
    function getMin(uint val1, uint val2) public pure returns(uint) {
        if(val1<val2 || val1 == val2) {
            return val1;
        }  
        else {
            return val2;
        }
    }
    
    function payPerson(address payable _personAddress, address _personKey) public payable {

        PoliceReport storage pR = addresses[_personKey];
        refund = getMin(maxCoverage, pR.damage * 1 ether);
        if((pR.eligible == true) && (pR.has_been_payed == false)) {
            _personAddress.transfer(refund);
            pR.has_been_payed = true;
           }
        else {
            revert();
            }
        }
    
}
